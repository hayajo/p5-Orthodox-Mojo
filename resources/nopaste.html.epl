<%
use DBI;
use Encode;
use FormValidator::Lite;
use Data::GUID::URLSafe;
use Time::Piece::Plus;
use IPC::Open3;
use Text::VimColor;

use constant +{
  DB       => 'db/nopaste.db',
  VIM      => 'vim',
  VIM_ARGS => [
    '-N',
    '-u', 'NONE',
    '-i', 'NONE',
    '-V1',
    '-e',
    '--cmd', ":echo \$VIMRUNTIME",
    '--cmd', ":q",
  ],
};

sub form_label {
  my ($param, $params, $v) = @_;

  my $label = $params->{$param};
  my $html  = "<label>${label}</label>";

  if ($v && $v->is_error($param)) {
    my $error = shift $v->get_error_messages_from_param($param);
    $html .= sprintf('<p class="text-error">%s</p>', $error);

  }

  return $html;
}

sub syntax {
  my ($in, $out, $err) = (Symbol::gensym(), Symbol::gensym(), Symbol::gensym());

  my $pid = IPC::Open3::open3($in, $out, $err, VIM() => @{ VIM_ARGS() });

  close ($in);
  close ($out);

  my $err_out = do { local $/; <$err> };
  chomp $err_out;

  my $gotpid = waitpid($pid, 0);

  my $error = $? >> 8;
  die $! if ($error);

  return [ map { m|([^/]+)\.vim$|; $1 } glob "${err_out}/syntax/*.vim" ];
}

title "nopaste";

my $params = +{
  title    => 'タイトル',
  body     => 'コード',
  filetype => 'ファイルタイプ',
};

my $v = FormValidator::Lite->new($self->req->body_params);
$v->load_function_message('ja');
$v->set_param_message(%$params);

if ( $self->req->method eq 'POST' ) {
  $v->check(
    title => [qw/NOT_NULL/],
    body  => [qw/NOT_NULL/],
  );
  unless ($v->has_error) {
    my $id = Data::GUID->new->as_base64_urlsafe;

    my @binds = ();
    push @binds, $id;
    push @binds, $v->query->param('title');
    push @binds, $v->query->param('filetype') || 'text';
    push @binds, $v->query->param('body');
    push @binds, Time::Piece::Plus->mysql_date;

    my $db  = $self->app->home->rel_file(DB);
    my $dbh = DBI->connect("dbi:SQLite:${db}", '', '');

    my $sth = $dbh->prepare(
      'INSERT INTO entry (id, title, filetype, body, created_at) VALUES (?, ?, ?, ?, ?)'
    );
    my $i = 1;
    map { $sth->bind_param( $i++, $_ ) } @binds;
    $sth->execute;

    $self->redirect_to($self->req->url->query(id => $id));
  }
}
elsif ( my $id = $self->req->query_params->param('id') ) {
  my $db  = $self->app->home->rel_file(DB);
  my $dbh = DBI->connect("dbi:SQLite:${db}", '', '');

  my $entry = $dbh->selectrow_hashref(
    "SELECT * FROM entry WHERE id = ?",
    {},
    $id,
  );

  if ($entry) {
    $entry->{highlighted} = decode_utf8(
      Text::VimColor->new(
        string   => encode_utf8($entry->{body}),
        filetype => $entry->{filetype},
      )->html,
    );
    $self->stash(entry => $entry);
  }
  else {
    $self->res->code(404);
  }
}

%>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title><%= title %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="/css/bootstrap.css" rel="stylesheet">
  <link href="/css/bootstrap-responsive.css" rel="stylesheet">
  <style type="text/css">
    body {
      padding-top: 60px;
      padding-bottom: 40px;
    }
    .synSpecial { color: #c000c0; }
    .synType { color: #008000; }
    .synComment { color: #0000c0; }
    .synPreProc { color: #c000c0; }
    .synIdentifier { color: #008080; }
    .synConstant { color: #c00000; }
    .synStatement { color: #804000; }
  </style>
  <script src="/js/jquery-1.10.2.min.js"></script>
</head>
<body>
  <div class="navbar navbar-inverse navbar-fixed-top">
    <div class=navbar-inner>
      <div class=container>
        <a class="brand" href="<%= $self->req->url->path %>"><%= title %></a>
      </div>
    </div>
  </div> <!-- navbar -->

  <div class="container">
    % if (my $entry = $self->stash('entry')) {
      <div class="row">
        <div class="span12">
          <h2><%= $entry->{title} %></h2>
        </div>
      </div>
      <div class="row">
        <div class="span12">
          <pre><%== $entry->{highlighted} %></pre>
        </div>
      </div>
    % } else {
      %= form_for $self->req->url => (method => 'POST') => begin
        <fieldset>
          %== form_label('title', $params, $v)
          %= text_field 'title', (class => 'input-block-level')
          %== form_label('filetype', $params, $v)
          %= select_field filetype => [ ['指定なし' => 'text'], @{syntax()} ]
          %== form_label('body', $params, $v)
          %= text_area 'body', rows => 20, (class => 'input-block-level')
          <button type="submit" class="btn">投稿する</button>
        </fiedset>
      % end
    % }
  </div><!-- container -->

  <script src="/js/bootstrap.js"></script>

</body>
</html>
